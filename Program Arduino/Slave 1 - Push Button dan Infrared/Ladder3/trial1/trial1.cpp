/* This is auto-generated C code from LDmicro. Do not edit this file! Go
   back to the LDmicro ladder diagram source for changes in the ladder logic, and make
   any C additions either in ladder.h or in additional .c or .h files linked
   against this one. */

/* You must provide ladder.h; there you must provide:
   a typedef for SWORD and ldBOOL, signed 16 bit and boolean types
   (probably typedef signed short SWORD; typedef unsigned char bool;)

   You must also provide implementations of all the I/O read/write
   either as inlines in the header file or in another source file. (The
   I/O functions are all declared extern.)

   See the generated source code (below) for function names. */

#include "ladder.h"
#include "trial1.h" // Copy this line into main project file where is function main().

/* Ux_xxx symbols correspond to user-defined names. There is such a symbol
   for every internal relay, variable, timer, and so on in the ladder
   program. Ix_xxx symbols are internally generated. */
/* Ix_xxx
   Ux_xxx
    ^
    b means bool type
    i means int type */

STATIC ldBOOL Ib_rung_top = 0;
#ifndef USE_MACRO
  // LDmicro provide this function.
  ldBOOL Read_Ub_XPB1(void) {
    return digitalRead(pin_Ub_XPB1);
  }
#endif

STATIC ldBOOL Ib_parOut_0 = 0;
STATIC ldBOOL Ib_parThis_0 = 0;
#ifndef USE_MACRO
  // LDmicro provide this function.
  ldBOOL Read_Ub_XS1(void) {
    return digitalRead(pin_Ub_XS1);
  }
#endif

STATIC ldBOOL Ib_once_0_ONE_SHOT_RISING = 0;
STATIC ldBOOL Ub_RIR11 = 0;
STATIC ldBOOL Ub_RIR12 = 0;
STATIC SWORD Ui_T1 = 0;
#ifndef USE_MACRO
  // LDmicro provide these functions.
  ldBOOL Read_Ub_YR1(void) {
    return digitalRead(pin_Ub_YR1);
  }
  void Write_Ub_YR1(ldBOOL b) {
    digitalWrite(pin_Ub_YR1,b);
  }
  void Write1_Ub_YR1(void) {
    digitalWrite(pin_Ub_YR1,HIGH);
  }
  void Write0_Ub_YR1(void) {
    digitalWrite(pin_Ub_YR1,LOW);
  }
#endif

#ifndef USE_MACRO
  // LDmicro provide these functions.
  ldBOOL Read_Ub_YR2(void) {
    return digitalRead(pin_Ub_YR2);
  }
  void Write_Ub_YR2(ldBOOL b) {
    digitalWrite(pin_Ub_YR2,b);
  }
  void Write1_Ub_YR2(void) {
    digitalWrite(pin_Ub_YR2,HIGH);
  }
  void Write0_Ub_YR2(void) {
    digitalWrite(pin_Ub_YR2,LOW);
  }
#endif

#ifndef USE_MACRO
  // LDmicro provide this function.
  ldBOOL Read_Ub_XPB2(void) {
    return digitalRead(pin_Ub_XPB2);
  }
#endif

STATIC ldBOOL Ib_parOut_1 = 0;
STATIC ldBOOL Ib_parThis_1 = 0;
#ifndef USE_MACRO
  // LDmicro provide this function.
  ldBOOL Read_Ub_XS2(void) {
    return digitalRead(pin_Ub_XS2);
  }
#endif

STATIC ldBOOL Ib_once_1_ONE_SHOT_RISING = 0;
STATIC ldBOOL Ub_RIR21 = 0;
STATIC ldBOOL Ub_RIR22 = 0;
STATIC SWORD Ui_T2 = 0;
#ifndef USE_MACRO
  // LDmicro provide these functions.
  ldBOOL Read_Ub_YR3(void) {
    return digitalRead(pin_Ub_YR3);
  }
  void Write_Ub_YR3(ldBOOL b) {
    digitalWrite(pin_Ub_YR3,b);
  }
  void Write1_Ub_YR3(void) {
    digitalWrite(pin_Ub_YR3,HIGH);
  }
  void Write0_Ub_YR3(void) {
    digitalWrite(pin_Ub_YR3,LOW);
  }
#endif

#ifndef USE_MACRO
  // LDmicro provide these functions.
  ldBOOL Read_Ub_YR4(void) {
    return digitalRead(pin_Ub_YR4);
  }
  void Write_Ub_YR4(ldBOOL b) {
    digitalWrite(pin_Ub_YR4,b);
  }
  void Write1_Ub_YR4(void) {
    digitalWrite(pin_Ub_YR4,HIGH);
  }
  void Write0_Ub_YR4(void) {
    digitalWrite(pin_Ub_YR4,LOW);
  }
#endif

#ifndef USE_MACRO
  // LDmicro provide this function.
  ldBOOL Read_Ub_XPB3(void) {
    return digitalRead(pin_Ub_XPB3);
  }
#endif

STATIC ldBOOL Ib_parOut_2 = 0;
STATIC ldBOOL Ib_parThis_2 = 0;
#ifndef USE_MACRO
  // LDmicro provide this function.
  ldBOOL Read_Ub_XS3(void) {
    return digitalRead(pin_Ub_XS3);
  }
#endif

STATIC ldBOOL Ib_once_2_ONE_SHOT_RISING = 0;
STATIC ldBOOL Ub_RIR31 = 0;
STATIC ldBOOL Ub_RIR32 = 0;
STATIC SWORD Ui_T3 = 0;
#ifndef USE_MACRO
  // LDmicro provide these functions.
  ldBOOL Read_Ub_YR5(void) {
    return digitalRead(pin_Ub_YR5);
  }
  void Write_Ub_YR5(ldBOOL b) {
    digitalWrite(pin_Ub_YR5,b);
  }
  void Write1_Ub_YR5(void) {
    digitalWrite(pin_Ub_YR5,HIGH);
  }
  void Write0_Ub_YR5(void) {
    digitalWrite(pin_Ub_YR5,LOW);
  }
#endif

#ifndef USE_MACRO
  // LDmicro provide these functions.
  ldBOOL Read_Ub_YR6(void) {
    return digitalRead(pin_Ub_YR6);
  }
  void Write_Ub_YR6(ldBOOL b) {
    digitalWrite(pin_Ub_YR6,b);
  }
  void Write1_Ub_YR6(void) {
    digitalWrite(pin_Ub_YR6,HIGH);
  }
  void Write0_Ub_YR6(void) {
    digitalWrite(pin_Ub_YR6,LOW);
  }
#endif

#ifndef USE_MACRO
  // LDmicro provide this function.
  ldBOOL Read_Ub_XPB4(void) {
    return digitalRead(pin_Ub_XPB4);
  }
#endif

STATIC ldBOOL Ib_parOut_3 = 0;
STATIC ldBOOL Ib_parThis_3 = 0;
#ifndef USE_MACRO
  // LDmicro provide this function.
  ldBOOL Read_Ub_XS4(void) {
    return digitalRead(pin_Ub_XS4);
  }
#endif

STATIC ldBOOL Ib_once_3_ONE_SHOT_RISING = 0;
STATIC ldBOOL Ub_RIR41 = 0;
STATIC ldBOOL Ub_RIR42 = 0;
STATIC SWORD Ui_T4 = 0;
#ifndef USE_MACRO
  // LDmicro provide these functions.
  ldBOOL Read_Ub_YR7(void) {
    return digitalRead(pin_Ub_YR7);
  }
  void Write_Ub_YR7(ldBOOL b) {
    digitalWrite(pin_Ub_YR7,b);
  }
  void Write1_Ub_YR7(void) {
    digitalWrite(pin_Ub_YR7,HIGH);
  }
  void Write0_Ub_YR7(void) {
    digitalWrite(pin_Ub_YR7,LOW);
  }
#endif

#ifndef USE_MACRO
  // LDmicro provide these functions.
  ldBOOL Read_Ub_YR8(void) {
    return digitalRead(pin_Ub_YR8);
  }
  void Write_Ub_YR8(ldBOOL b) {
    digitalWrite(pin_Ub_YR8,b);
  }
  void Write1_Ub_YR8(void) {
    digitalWrite(pin_Ub_YR8,HIGH);
  }
  void Write0_Ub_YR8(void) {
    digitalWrite(pin_Ub_YR8,LOW);
  }
#endif


/* Call this function once per PLC cycle. You are responsible for calling
   it at the interval that you specified in the LDmicro MCU configuration when you
   generated this code. */
void PlcCycle(void) {
    // INIT TABLES
                                                                        
    // ======= START RUNG 1 =======
    LabelRung1:;
    Write_Ib_rung_top(1);
    // start series [
    // ELEM_CONTACTS
    if(!Read_Ub_XPB1()) {
        Write_Ib_rung_top(0);
    }
    // start parallel [
    Write_Ib_parOut_0(0);
    Write_Ib_parThis_0(Read_Ib_rung_top());
    // start series [
    // ELEM_CONTACTS
    if(Read_Ub_XS1()) {
        Write_Ib_parThis_0(0);
    }
    // ELEM_ONE_SHOT_RISING
    if(Read_Ib_parThis_0()) {
        if(Read_Ib_once_0_ONE_SHOT_RISING()) {
            Write_Ib_parThis_0(0);
        } else {
            Write_Ib_once_0_ONE_SHOT_RISING(1);
        }
    } else {
        Write_Ib_once_0_ONE_SHOT_RISING(0);
    }
    // ] finish series
    if(Read_Ib_parThis_0()) {
        Write_Ib_parOut_0(1);
    }
    Write_Ib_parThis_0(Read_Ib_rung_top());
    // ELEM_CONTACTS
    if(!Read_Ub_RIR11()) {
        Write_Ib_parThis_0(0);
    }
    if(Read_Ib_parThis_0()) {
        Write_Ib_parOut_0(1);
    }
    Write_Ib_rung_top(Read_Ib_parOut_0());
    // ] finish parallel
    // ELEM_CONTACTS
    if(Read_Ub_RIR12()) {
        Write_Ib_rung_top(0);
    }
    // ELEM_COIL
    Write_Ub_RIR11(Read_Ib_rung_top());
    // ] finish series
    
    // ======= START RUNG 2 =======
    LabelRung2:;
    Write_Ib_rung_top(1);
    // start series [
    // ELEM_CONTACTS
    if(!Read_Ub_RIR11()) {
        Write_Ib_rung_top(0);
    }
    // ELEM_TON T1 5000000
    if(Read_Ib_rung_top()) {
        if(Ui_T1 < 500) {
            Write_Ib_rung_top(0);
            Ui_T1++;
        }
    } else {
        Ui_T1 = 0;
    }
    // ELEM_COIL
    Write_Ub_RIR12(Read_Ib_rung_top());
    // ] finish series
    
    // ======= START RUNG 3 =======
    LabelRung3:;
    Write_Ib_rung_top(1);
    // start series [
    // ELEM_CONTACTS
    if(!Read_Ub_RIR11()) {
        Write_Ib_rung_top(0);
    }
    // ELEM_COIL
    if(Read_Ib_rung_top()) {
        Write0_Ub_YR1();
    } else {
        Write1_Ub_YR1();
    }
    // ] finish series
    
    // ======= START RUNG 4 =======
    LabelRung4:;
    Write_Ib_rung_top(1);
    // start series [
    // ELEM_CONTACTS
    if(Read_Ub_RIR11()) {
        Write_Ib_rung_top(0);
    }
    // ELEM_COIL
    if(Read_Ib_rung_top()) {
        Write0_Ub_YR2();
    } else {
        Write1_Ub_YR2();
    }
    // ] finish series
    
    // ======= START RUNG 5 =======
    LabelRung5:;
    Write_Ib_rung_top(1);
    // start series [
    // ELEM_CONTACTS
    if(!Read_Ub_XPB2()) {
        Write_Ib_rung_top(0);
    }
    // start parallel [
    Write_Ib_parOut_1(0);
    Write_Ib_parThis_1(Read_Ib_rung_top());
    // start series [
    // ELEM_CONTACTS
    if(Read_Ub_XS2()) {
        Write_Ib_parThis_1(0);
    }
    // ELEM_ONE_SHOT_RISING
    if(Read_Ib_parThis_1()) {
        if(Read_Ib_once_1_ONE_SHOT_RISING()) {
            Write_Ib_parThis_1(0);
        } else {
            Write_Ib_once_1_ONE_SHOT_RISING(1);
        }
    } else {
        Write_Ib_once_1_ONE_SHOT_RISING(0);
    }
    // ] finish series
    if(Read_Ib_parThis_1()) {
        Write_Ib_parOut_1(1);
    }
    Write_Ib_parThis_1(Read_Ib_rung_top());
    // ELEM_CONTACTS
    if(!Read_Ub_RIR21()) {
        Write_Ib_parThis_1(0);
    }
    if(Read_Ib_parThis_1()) {
        Write_Ib_parOut_1(1);
    }
    Write_Ib_rung_top(Read_Ib_parOut_1());
    // ] finish parallel
    // ELEM_CONTACTS
    if(Read_Ub_RIR22()) {
        Write_Ib_rung_top(0);
    }
    // ELEM_COIL
    Write_Ub_RIR21(Read_Ib_rung_top());
    // ] finish series
    
    // ======= START RUNG 6 =======
    LabelRung6:;
    Write_Ib_rung_top(1);
    // start series [
    // ELEM_CONTACTS
    if(!Read_Ub_RIR21()) {
        Write_Ib_rung_top(0);
    }
    // ELEM_TON T2 5000000
    if(Read_Ib_rung_top()) {
        if(Ui_T2 < 500) {
            Write_Ib_rung_top(0);
            Ui_T2++;
        }
    } else {
        Ui_T2 = 0;
    }
    // ELEM_COIL
    Write_Ub_RIR22(Read_Ib_rung_top());
    // ] finish series
    
    // ======= START RUNG 7 =======
    LabelRung7:;
    Write_Ib_rung_top(1);
    // start series [
    // ELEM_CONTACTS
    if(!Read_Ub_RIR21()) {
        Write_Ib_rung_top(0);
    }
    // ELEM_COIL
    if(Read_Ib_rung_top()) {
        Write0_Ub_YR3();
    } else {
        Write1_Ub_YR3();
    }
    // ] finish series
    
    // ======= START RUNG 8 =======
    LabelRung8:;
    Write_Ib_rung_top(1);
    // start series [
    // ELEM_CONTACTS
    if(Read_Ub_RIR21()) {
        Write_Ib_rung_top(0);
    }
    // ELEM_COIL
    if(Read_Ib_rung_top()) {
        Write0_Ub_YR4();
    } else {
        Write1_Ub_YR4();
    }
    // ] finish series
    
    // ======= START RUNG 9 =======
    LabelRung9:;
    Write_Ib_rung_top(1);
    // start series [
    // ELEM_CONTACTS
    if(!Read_Ub_XPB3()) {
        Write_Ib_rung_top(0);
    }
    // start parallel [
    Write_Ib_parOut_2(0);
    Write_Ib_parThis_2(Read_Ib_rung_top());
    // start series [
    // ELEM_CONTACTS
    if(Read_Ub_XS3()) {
        Write_Ib_parThis_2(0);
    }
    // ELEM_ONE_SHOT_RISING
    if(Read_Ib_parThis_2()) {
        if(Read_Ib_once_2_ONE_SHOT_RISING()) {
            Write_Ib_parThis_2(0);
        } else {
            Write_Ib_once_2_ONE_SHOT_RISING(1);
        }
    } else {
        Write_Ib_once_2_ONE_SHOT_RISING(0);
    }
    // ] finish series
    if(Read_Ib_parThis_2()) {
        Write_Ib_parOut_2(1);
    }
    Write_Ib_parThis_2(Read_Ib_rung_top());
    // ELEM_CONTACTS
    if(!Read_Ub_RIR31()) {
        Write_Ib_parThis_2(0);
    }
    if(Read_Ib_parThis_2()) {
        Write_Ib_parOut_2(1);
    }
    Write_Ib_rung_top(Read_Ib_parOut_2());
    // ] finish parallel
    // ELEM_CONTACTS
    if(Read_Ub_RIR32()) {
        Write_Ib_rung_top(0);
    }
    // ELEM_COIL
    Write_Ub_RIR31(Read_Ib_rung_top());
    // ] finish series
    
    // ======= START RUNG 10 =======
    LabelRung10:;
    Write_Ib_rung_top(1);
    // start series [
    // ELEM_CONTACTS
    if(!Read_Ub_RIR31()) {
        Write_Ib_rung_top(0);
    }
    // ELEM_TON T3 5000000
    if(Read_Ib_rung_top()) {
        if(Ui_T3 < 500) {
            Write_Ib_rung_top(0);
            Ui_T3++;
        }
    } else {
        Ui_T3 = 0;
    }
    // ELEM_COIL
    Write_Ub_RIR32(Read_Ib_rung_top());
    // ] finish series
    
    // ======= START RUNG 11 =======
    LabelRung11:;
    Write_Ib_rung_top(1);
    // start series [
    // ELEM_CONTACTS
    if(!Read_Ub_RIR31()) {
        Write_Ib_rung_top(0);
    }
    // ELEM_COIL
    if(Read_Ib_rung_top()) {
        Write0_Ub_YR5();
    } else {
        Write1_Ub_YR5();
    }
    // ] finish series
    
    // ======= START RUNG 12 =======
    LabelRung12:;
    Write_Ib_rung_top(1);
    // start series [
    // ELEM_CONTACTS
    if(Read_Ub_RIR31()) {
        Write_Ib_rung_top(0);
    }
    // ELEM_COIL
    if(Read_Ib_rung_top()) {
        Write0_Ub_YR6();
    } else {
        Write1_Ub_YR6();
    }
    // ] finish series
    
    // ======= START RUNG 13 =======
    LabelRung13:;
    Write_Ib_rung_top(1);
    // start series [
    // ELEM_CONTACTS
    if(!Read_Ub_XPB4()) {
        Write_Ib_rung_top(0);
    }
    // start parallel [
    Write_Ib_parOut_3(0);
    Write_Ib_parThis_3(Read_Ib_rung_top());
    // start series [
    // ELEM_CONTACTS
    if(Read_Ub_XS4()) {
        Write_Ib_parThis_3(0);
    }
    // ELEM_ONE_SHOT_RISING
    if(Read_Ib_parThis_3()) {
        if(Read_Ib_once_3_ONE_SHOT_RISING()) {
            Write_Ib_parThis_3(0);
        } else {
            Write_Ib_once_3_ONE_SHOT_RISING(1);
        }
    } else {
        Write_Ib_once_3_ONE_SHOT_RISING(0);
    }
    // ] finish series
    if(Read_Ib_parThis_3()) {
        Write_Ib_parOut_3(1);
    }
    Write_Ib_parThis_3(Read_Ib_rung_top());
    // ELEM_CONTACTS
    if(!Read_Ub_RIR41()) {
        Write_Ib_parThis_3(0);
    }
    if(Read_Ib_parThis_3()) {
        Write_Ib_parOut_3(1);
    }
    Write_Ib_rung_top(Read_Ib_parOut_3());
    // ] finish parallel
    // ELEM_CONTACTS
    if(Read_Ub_RIR42()) {
        Write_Ib_rung_top(0);
    }
    // ELEM_COIL
    Write_Ub_RIR41(Read_Ib_rung_top());
    // ] finish series
    
    // ======= START RUNG 14 =======
    LabelRung14:;
    Write_Ib_rung_top(1);
    // start series [
    // ELEM_CONTACTS
    if(!Read_Ub_RIR41()) {
        Write_Ib_rung_top(0);
    }
    // ELEM_TON T4 5000000
    if(Read_Ib_rung_top()) {
        if(Ui_T4 < 500) {
            Write_Ib_rung_top(0);
            Ui_T4++;
        }
    } else {
        Ui_T4 = 0;
    }
    // ELEM_COIL
    Write_Ub_RIR42(Read_Ib_rung_top());
    // ] finish series
    
    // ======= START RUNG 15 =======
    LabelRung15:;
    Write_Ib_rung_top(1);
    // start series [
    // ELEM_CONTACTS
    if(!Read_Ub_RIR41()) {
        Write_Ib_rung_top(0);
    }
    // ELEM_COIL
    if(Read_Ib_rung_top()) {
        Write0_Ub_YR7();
    } else {
        Write1_Ub_YR7();
    }
    // ] finish series
    
    // ======= START RUNG 16 =======
    LabelRung16:;
    Write_Ib_rung_top(1);
    // start series [
    // ELEM_CONTACTS
    if(Read_Ub_RIR41()) {
        Write_Ib_rung_top(0);
    }
    // ELEM_COIL
    if(Read_Ib_rung_top()) {
        Write0_Ub_YR8();
    } else {
        Write1_Ub_YR8();
    }
    // ] finish series
    LabelRung17:;
    // Latest INT_OP here
}

// PLC Cycle timing function.
boolean IsPlcInterval() {
    static unsigned long last_run;
    unsigned long micros_now = micros();
    if (micros_now - last_run >= PLC_INTERVAL) {
        last_run = micros_now;
        return true;
    }
    return false;
}

// Call loopPlc() function in loop() of your arduino project once.
void loopPlc() {
    if (IsPlcInterval()) {
        #ifdef USE_WDT
          wdt_reset();
        #endif
        PlcCycle();

    }
}

// Call setupPlc() function in setup() function of your arduino project once.
void setupPlc(void) {
   #ifdef USE_WDT
     wdt_enable(WDTO_2S);
   #endif
// Initialize PLC cycle timer here if you need.
// ...

// Set up analog reference type
    analogReference(analogReference_type);

// Set up I/O pins
    pinMode(pin_Ub_XPB1, INPUT_PULLUP);
    pinMode(pin_Ub_XPB2, INPUT_PULLUP);
    pinMode(pin_Ub_XPB3, INPUT_PULLUP);
    pinMode(pin_Ub_XPB4, INPUT_PULLUP);
    pinMode(pin_Ub_XS1, INPUT_PULLUP);
    pinMode(pin_Ub_XS2, INPUT_PULLUP);
    pinMode(pin_Ub_XS3, INPUT_PULLUP);
    pinMode(pin_Ub_XS4, INPUT_PULLUP);
    pinMode(pin_Ub_YR1, OUTPUT);
    pinMode(pin_Ub_YR2, OUTPUT);
    pinMode(pin_Ub_YR3, OUTPUT);
    pinMode(pin_Ub_YR4, OUTPUT);
    pinMode(pin_Ub_YR5, OUTPUT);
    pinMode(pin_Ub_YR6, OUTPUT);
    pinMode(pin_Ub_YR7, OUTPUT);
    pinMode(pin_Ub_YR8, OUTPUT);
}
